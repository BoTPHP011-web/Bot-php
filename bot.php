import ccxt
import pandas as pd
from datetime import datetime
import telegram
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands
from ta.trend import SMAIndicator
import asyncio

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =======
TELEGRAM_TOKEN = "8055499750:AAEdJ82x43ZbX3fnxK0lwHOkcu2Nn6v6sWs'""
TELEGRAM_USER_ID = 7831076059   # —Ç–≤–æ–π id

# –¢–æ–ª—å–∫–æ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –Ω–∞ Binance
PAIRS = ["BTC/USDT", "ETH/USDT", "BNB/USDT"]
TIMEFRAME = "1m"

exchange = ccxt.binance({
    "enableRateLimit": True,
    "options": {"defaultType": "spot"},
})

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def fetch_ohlcv(pair, timeframe="1m", limit=100):
    try:
        ohlcv = exchange.fetch_ohlcv(pair, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {pair}: {e}")
        return None

# === –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ===
def calculate_indicators(df):
    df["rsi"] = RSIIndicator(df["close"], window=14).rsi()
    bb = BollingerBands(df["close"], window=20, window_dev=2)
    df["bb_upper"] = bb.bollinger_hband()
    df["bb_lower"] = bb.bollinger_lband()
    df["sma"] = SMAIndicator(df["close"], window=50).sma_indicator()
    return df

# === –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ===
def check_signal(df):
    last = df.iloc[-1]
    if last["rsi"] < 30 and last["low"] <= last["bb_lower"] and last["close"] > last["sma"]:
        return "CALL (–ø–æ–∫—É–ø–∫–∞)"
    elif last["rsi"] > 70 and last["high"] >= last["bb_upper"] and last["close"] < last["sma"]:
        return "PUT (–ø—Ä–æ–¥–∞–∂–∞)"
    return None

# === –ö–æ–º–∞–Ω–¥–∞ –≤ Telegram ===
async def dai_plus(update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id != TELEGRAM_USER_ID:
        await context.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    messages = []
    for pair in PAIRS:
        df = fetch_ohlcv(pair, timeframe=TIMEFRAME, limit=100)
        if df is None:
            continue
        df = calculate_indicators(df)
        signal = check_signal(df)
        if signal:
            messages.append(f"‚ö° {pair}: {signal}")
    
    if not messages:
        await context.bot.send_message(chat_id=chat_id, text="–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç üö´")
    else:
        await context.bot.send_message(chat_id=chat_id, text="\n".join(messages))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("dai_plus", dai_plus))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ. –í–≤–µ–¥–∏ –≤ Telegram /dai_plus")
    await app.run_polling()

if name == "main":
    asyncio.run(main())
